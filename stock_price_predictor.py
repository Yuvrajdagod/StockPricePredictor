# -*- coding: utf-8 -*-
"""Stock-price predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17JuUFRGF3FWuLdxaVc8CxvnPC0Ul-ZUG
"""

import yfinance as yf
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import tkinter as tk
from tkinter import ttk, messagebox
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from datetime import datetime
import time

# Function to fetch stock data with retry mechanism
def get_stock_data(stock, retries=3):
    end = datetime.now()
    start = datetime(end.year - 20, end.month, end.day)
    for attempt in range(retries):
        try:
            stock_data = yf.download(stock, start, end)
            if stock_data.empty:
                raise ValueError("No data found for the ticker.")
            return stock_data
        except Exception as e:
            print(f"Attempt {attempt + 1}: Failed to get ticker '{stock}' - {e}")
            time.sleep(2)  # wait for 2 seconds before retrying
    messagebox.showerror("Error", f"Failed to fetch data for {stock} after multiple attempts.")
    return None

# Function to plot the predictions
def plot_predictions(stock_data):
    if stock_data is None or stock_data.empty:
        messagebox.showerror("Error", "No data to plot.")
        return

    # Scaling and preparing data
    Adj_close_price = stock_data[['Adj Close']]
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(Adj_close_price)

    # Creating the training and testing dataset
    x_data, y_data = [], []
    for i in range(100, len(scaled_data)):
        x_data.append(scaled_data[i-100:i])
        y_data.append(scaled_data[i])

    x_data, y_data = np.array(x_data), np.array(y_data)
    splitting_len = int(len(x_data) * 0.7)
    x_train, y_train = x_data[:splitting_len], y_data[:splitting_len]
    x_test, y_test = x_data[splitting_len:], y_data[splitting_len:]

    # LSTM Model
    model = Sequential()
    model.add(LSTM(128, return_sequences=True, input_shape=(x_train.shape[1], 1)))
    model.add(LSTM(64, return_sequences=False))
    model.add(Dense(25))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mean_squared_error')

    # Model Training
    model.fit(x_train, y_train, batch_size=32, epochs=4)

    # Making Predictions
    predictions = model.predict(x_test)
    predictions = scaler.inverse_transform(predictions)
    inv_y_test = scaler.inverse_transform(y_test)

    # Plotting
    ploting_data = pd.DataFrame({
        'original_test_data': inv_y_test.reshape(-1),
        'predictions': predictions.reshape(-1)
    }, index=stock_data.index[splitting_len + 100:])

    plot_graph(ploting_data)

# Function to plot the graph
def plot_graph(data):
    fig, ax = plt.subplots(figsize=(15, 5))
    ax.plot(data.index, data['original_test_data'], label='Original Data')
    ax.plot(data.index, data['predictions'], label='Predictions')
    ax.set_xlabel("Date")
    ax.set_ylabel("Stock Price")
    ax.set_title("Stock Price Predictions")
    ax.legend()

    # Displaying the plot in the tkinter window
    canvas = FigureCanvasTkAgg(fig, master=window)
    canvas.draw()
    canvas.get_tk_widget().pack()

# Function triggered by button click
def on_predict():
    selected_stock = stock_var.get()
    stock_data = get_stock_data(selected_stock)
    plot_predictions(stock_data)

# Initialize tkinter window
window = tk.Tk()
window.title("Stock Prediction App")

# Set window size and background color
window.geometry("1024x768")  # Set the window size
window.config(bg="#f0f0f0")  # Set a light background color

# Add a styled heading
heading = tk.Label(window, text="Stock Price Prediction App", font=("Helvetica", 24, "bold"), bg="#f0f0f0", fg="#333")
heading.pack(pady=20)

# Dropdown for selecting stock
stock_var = tk.StringVar()
stock_choices = ['GOOG', 'AAPL', 'MSFT', 'TSLA', 'AMZN']
stock_menu = ttk.Combobox(window, textvariable=stock_var, values=stock_choices)
stock_menu.pack(pady=10)

# Button to trigger prediction
predict_button = tk.Button(window, text="Predict", command=on_predict, font=("Helvetica", 14), bg="#4CAF50", fg="white")
predict_button.pack(pady=10)

# Run the tkinter main loop
window.mainloop()